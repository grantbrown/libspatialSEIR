{"name":"Libspatialseir","tagline":"A C++ and OpenCL framework for fast Bayesian spatio-temporal compartmental epidemic modeling. ","body":"### libspatialSEIR\r\nlibspatialSEIR is a C++/OpenCL based framework for fitting Bayesian spatial SEIR and SEIRS compartmental epidemic models.\r\nThe numerical heavy lifting is all done in C++ with the optional use of OpenCL calls to multi-core CPU's and \r\nGPU's to accelerate computation. The primary interface is provided via the included R package, which uses the Rcpp \r\nlibrary to access the lower level C++ API. \r\n\r\nAt this point documentation is pretty limited, but a description of the class of models which can be fit\r\nis available in /doc/models/SEIR_ALGO.pdf\r\n\r\nIn addition, example R code is available in the /scripts directory.  \r\n\r\n\r\n### Dependencies\r\nWhile a CRAN friendly version of libspatialSEIR is tentatively planned, the project currently requires some prerequisites:\r\n\r\n1. Git\r\n2. CMake\r\n3. An appropriate C++ compiler \r\n4. Boost random >= 1.4.9 \r\n5. An OpenCL distribution\r\n6. (preferably) R >= 3.0\r\n\r\n### Installation\r\n\r\nThe installation process is still very much in \"development\" mode. As of now, it has only been tested on Linux Mint, but similar instructions \r\nshould apply for other platforms. After installing the appropriate pre-requisites, clone a copy of the repository. In order to make sure you \r\nget a copy of the embedded version of clBLAS, be sure to clone the repository recursively:\r\n\r\n\r\n``` \r\n    git clone https://github.com/grantbrown/libspatialSEIR.git --recursive\r\n``` \r\n\r\n\r\nOnce you have a copy of the code, change to the project directory and create a build folder. Use CMake to generate the \r\nappropriate build files. \r\n\r\n``` \r\n    cd libspatialSEIR\r\n    mkdir build\r\n    cd build\r\n    cmake ../\r\n``` \r\n\r\nAssuming this step completed correctly, make and install the library. At some point it should be feasible to just make the library\r\nand link to it, but first I need to figure out how to make R play nice with shared objects being placed in non-standard directories. \r\n\r\n``` \r\n    make\r\n    sudo make install\r\n``` \r\n\r\nNext you'll need to build the R package itself. \r\n\r\n``` \r\n    cd ../R\r\n    R CMD INSTALL package\r\n``` \r\nThat should be it, though as previously mentioned this is still very much a work in progress. Assuming it worked, you could try out some of\r\nthe example scripts. \r\n\r\n``` \r\n    cd ../scripts\r\n    R\r\n    > source(\"./singleLocationTest.R\")\r\n```\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}